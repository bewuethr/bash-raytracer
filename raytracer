#!/bin/bash
set -u

# Global variables
init_globals () {
    # Field of view in degrees, default to 90
    local fov=${1:-90}

    # Image dimensions
    img_w=$(tput cols)
    img_h=$(tput lines)

    # Aspect ratio takes non-square pixel shape into account
    img_ar=$(bc -l <<< "scale=3; ($img_w / 2) / $img_h")

    # Scale for field of view; pi is 4 * atan(1)
    scale=$(bc -l <<< "scale=3; x = $fov * 2 * a(1) / 180; s(x)/c(x)")

    # Background colour
    bgr_col=38
}

# Transform 3D vector with given matrix - assume row vector and v * M
vec_matrix_mult () {
    local v=($1 $2 $3) # The vector
    local -n M=$4      # The matrix
    local v_res
    v_res[0]=$(bc -l <<< \
        "scale=3; ${v[0]} * ${M[0,0]} + ${v[1]} * ${M[1,0]} + ${v[2]} * ${M[2,0]} + ${M[3,0]}")
    v_res[1]=$(bc -l <<< \
        "scale=3; ${v[0]} * ${M[0,1]} + ${v[1]} * ${M[1,1]} + ${v[2]} * ${M[2,1]} + ${M[3,1]}")
    v_res[2]=$(bc -l <<< \
        "scale=3; ${v[0]} * ${M[0,2]} + ${v[1]} * ${M[1,2]} + ${v[2]} * ${M[2,2]} + ${M[3,2]}")
    echo "${v_res[@]}"
}

# Subtract the second vector from the first vector
vec_diff () {
    local v1=($1 $2 $3)
    local v2=($4 $5 $6)
    echo "$(bc -l <<< "scale=3; ${v1[0]} - ${v2[0]}") \
        $(bc -l <<< "scale=3; ${v1[1]} - ${v2[1]}") \
        $(bc -l <<< "scale=3; ${v1[2]} - ${v2[2]}")"
}

# Transform x,y raster coordinates to camera coordinates
raster_to_camera () {
    local x=$1
    local y=$2

    x=$(bc -l <<< "scale=3; (2 * ($x + 0.5) / $img_w - 1) * $img_ar * $scale")
    y=$(bc -l <<< "scale=3; 1 - 2 * ($y + 0.5) / $img_h * $scale")

    echo "$x $y -1"
}

# Normalize argument vector to unit length
normalize () {
    local v=($@)
    local len=$(bc -l <<< "scale=3; sqrt(${v[0]}^2 + ${v[1]}^2 + ${v[2]}^2)")
    local v_res
    v_res[0]=$(bc -l <<< "scale=3; ${v[0]} / $len")
    v_res[1]=$(bc -l <<< "scale=3; ${v[1]} / $len")
    v_res[2]=$(bc -l <<< "scale=3; ${v[2]} / $len")
    echo "${v_res[@]}"
}

# Arguments: origin and direction of ray, centre and radius of sphere
# Prints 1 if ray intersects sphere and 0 if not
# Currently just evaluating the discriminant of the quadratic equation
intersect () {
    local o=($1 $2 $3)
    local d=($4 $5 $6)
    local c=($7 $8 $9)
    local r=${10}
    bc -l <<EOF
        define dot_prod(v1[], v2[]) {
        auto i, prod
        for (i = 0; i < 3; ++i)
            prod += v1[i] * v2[i]
            return prod
        }

        o[0] = ${o[0]}
        o[1] = ${o[1]}
        o[2] = ${o[2]}
        d[0] = ${d[0]}
        d[1] = ${d[1]}
        d[2] = ${d[2]}
        c[0] = ${c[0]}
        c[1] = ${c[1]}
        c[2] = ${c[2]}
        r    = $r

        a = dot_prod(d[], d[])
        b = 2 * (dot_prod(o[], d[]) - dot_prod(d[], c[]))
        c = dot_prod(o[], o[]) + dot_prod(c[], c[]) - 2 * dot_prod(o[], c[]) - r^2

        print b^2 >= 4 * a * c
EOF
}

# Arguments: origin and direction of ray
# Tests intersection with objects in scene
# Currently hardcoded to the global sphere
# Prints colour of sphere if the ray intersects, "Background" if not
trace () {
    local o=($1 $2 $3)
    local d=($4 $5 $6)
    if (( $(intersect "${o[@]}" "${d[@]}" ${sphere0[origin]} ${sphere0[radius]}) )); then
        echo ${sphere0[col]}
    else
        echo $bgr_col
    fi
}

init_globals 90

reset=$(tput sgr0)

# Objects
declare -A sphere0=([origin]="1.5 2 0.5" [radius]=0.9 [col]=81)

# Ray origin in camera coordinates
ray_origin=(0 0 0)

# Initialize camera-to-world matrix, currently hardcoded
declare -A cam_to_world
cam_to_world=(
    [0,0]=0.707  [0,1]=-0.707 [0,2]=0 [0,3]=0
    [1,0]=0      [1,1]=0      [1,2]=1 [1,3]=0
    [2,0]=-0.707 [2,1]=-0.707 [2,2]=0 [2,3]=0
    [3,0]=0      [3,1]=0      [3,2]=1 [3,3]=1
)


ray_origin_world=($(vec_matrix_mult "${ray_origin[@]}" cam_to_world))

for (( i = 0; i < img_h; ++i )); do
    for (( j = 0; j < img_w; ++j )); do
        ray_p_cam=($(raster_to_camera $j $i))
        ray_p_world=($(vec_matrix_mult "${ray_p_cam[@]}" cam_to_world))
        ray_direction=($(vec_diff "${ray_p_world[@]}" "${ray_origin_world[@]}"))
        ray_direction=($(normalize "${ray_direction[@]}"))
        colour=$(trace "${ray_origin_world[@]}" "${ray_direction[@]}")
        colour=$(tput setab $colour)
        printf "%b" "$colour $reset"
    done
    echo
done
